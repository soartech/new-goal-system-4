
setup { 
  source "common.soar"

  NGS_DeclareGoal TestAchievementGoal
  NGS_DeclareGoal TestAchievementSubGoal
  NGS_DeclareGoal TestMaintenanceGoal


}

test goal-i-support-goal-creation { 

sp "test*create-achievement-goal
    [ngs-match-goalpool <s> <goals> TestAchievementGoal]
    (<s> ^$WM_CYCLE_COUNT > 2)
-->
    [ngs-create-goal-in-place <goals> TestAchievementGoal $NGS_GB_ACHIEVE <new-goal>]" 

sp "test
    [ngs-match-goal <s> TestAchievementGoal <g> $NGS_GB_ACHIEVE]
-->
    (pass)"

}

test create-atomic-value {
    
sp "test*create-primitive-object
   (state <s> ^superstate nil
             -^primitive)
-->
    [ngs-create-primitive-by-operator <s> <s> primitive 5 $NGS_REPLACE_IF_EXISTS]"

sp "test*create-primitive-object*2
    (state <s> ^superstate nil
               ^primitive  5)
-->
    [ngs-create-primitive-by-operator <s> <s> primitive 6 $NGS_REPLACE_IF_EXISTS]"

sp "test*create-primitive-object*3
    (state <s> ^superstate nil
               ^primitive  6)
-->
    [ngs-create-primitive-by-operator <s> <s> primitive 7 $NGS_ADD_TO_SET]"

sp "test
    (state <s> ^primitive 7 ^primitive 6 -^primitive 5)
-->
    (pass)"
}

test create-layered-value {

sp "test*setup-shallow-copy-object
  (state <s> ^superstate nil)
-->
  [ngs-create-typed-object-in-place <s> sub-structure Foo <new-obj>]
  (<new-obj> ^existing-attribute-1 foo
             ^existing-attribute-2 bar
             ^existing-attribute-set 1
             ^existing-attribute-set 2)"

sp "test*create-new-object-1
    (state <s> ^superstate nil
               ^sub-structure <sub-structure>
              -^step)
    [ngs-is-not-constructed <s> complex]
-->
    [ngs-create-typed-object-by-operator <s> <s> complex ComplexObject <new-obj>]
    (<new-obj> ^already-exists <sub-structure>
               ^primitive1 foo
               ^primitive2 10)
    [ngs-create-typed-object-in-place <new-obj> deep-structure DeepType <deep> $NGS_DEEP_COPY]
    (<deep> ^copy-me-1 a
            ^copy-me-2 b
            ^copy-me-set 1
            ^copy-me-set 2
            ^copy-me-set 3)"

sp "test*step1*done
     (state <s> ^superstate nil
                ^sub-structure <sub-structure>
               -^step)
     [ngs-is-constructed <s> complex <complex>]
     (<complex> -^primitive1 bar)
-->
     [ngs-create-primitive-by-operator <s> <s> step 2]"
    

sp "test*create-new-object-2
    (state <s> ^superstate nil
               ^sub-structure <sub-structure>
               ^step 2)
    -{
        [ngs-is-constructed <s> complex <complex>]
        (<complex> ^primitive1 bar)
     }
-->
    [ngs-create-typed-object-by-operator <s> <s> complex ComplexObject <new-obj>]
    (<new-obj> ^already-exists <sub-structure>
               ^primitive1 bar
               ^primitive2 10)
    [ngs-create-typed-object-in-place <new-obj> deep-structure DeepType <deep> $NGS_DEEP_COPY]
    (<deep> ^copy-me-1 a
            ^copy-me-2 b
            ^copy-me-set 1
            ^copy-me-set 2
            ^copy-me-set 3)"

sp "test*step2*done
    (state <s> ^superstate nil
               ^sub-structure <sub-structure>
               ^step 2)
    [ngs-is-constructed <s> complex <complex>]
    (<complex> ^primitive1 bar)
    -{
        [ngs-is-constructed <s> complex <complex2>]
        (<complex2> -^primitive1 bar)
     }
-->
     [ngs-create-primitive-by-operator <s> <s> step 3]"

sp "test*create-new-object-3
    (state <s> ^superstate nil
               ^sub-structure <sub-structure>
               ^step 3)
    [ngs-is-constructed <s> complex <complex>]
    (<complex> ^primitive1 bar)
    -{
        [ngs-is-constructed <s> complex <complex2>]
        (<complex2> -^primitive1 bar)
     }
-->
    [ngs-create-typed-object-by-operator <s> <s> complex ComplexObject <new-obj> $NGS_ADD_TO_SET]
    (<new-obj> ^already-exists <sub-structure>
               ^primitive1 foo
               ^primitive2 10)
    [ngs-create-typed-object-in-place <new-obj> deep-structure DeepType <deep> $NGS_DEEP_COPY]
    (<deep> ^copy-me-1 a
            ^copy-me-2 b
            ^copy-me-set 1
            ^copy-me-set 2
            ^copy-me-set 3)" 

sp "test
    (state <s> ^superstate nil
               ^sub-structure <alerady>
               ^complex <complex1>
               ^complex {<complex2> <> <complex1> })
    (<complex1> ^primitive1 foo
                ^deep-structure <deep1>
                ^already-exists <already>)
    (<complex2> ^primitive1 bar
                ^deep-structure { <deep2> <> <deep1> }
                ^already-exists <already>) 
-->
    (pass)"
}

# This test shows that the deep copy process, as implemented, does not properly copy
#  set items with sub-structure. It will properly shallow copy set items.
# The result is a cross-product of attributes for the set items. The obvious solution
#  to this is to drop into a sub-state to do copying deeper than one level (this
#  could be an enhancement added down the road).                                                                      
test deep-copy-with-set-values {

sp "test*create-new-object-1
    (state <s> ^superstate nil)
    [ngs-is-not-constructed <s> complex]
-->
    [ngs-create-typed-object-by-operator <s> <s> complex ComplexObject <new-obj>]
    [ngs-create-typed-object-in-place <new-obj> deep-structure DeepType <deep1> $NGS_DEEP_COPY]
    (<deep1> ^copy-me-1 a)
    [ngs-create-typed-object-in-place <new-obj> deep-structure DeepType <deep2> $NGS_DEEP_COPY]
    (<deep2> ^different a) 
    [ngs-create-typed-object-in-place <deep1> deep-structure DeepType <deep21> $NGS_DEEP_COPY]
    (<deep21> ^copy-me-1 a)
    [ngs-create-typed-object-in-place <deep1> deep-structure DeepType <deep22> $NGS_DEEP_COPY]
    (<deep22> ^different a)  
    [ngs-create-typed-object-in-place <deep21> deep-structure DeepType <deep211> $NGS_DEEP_COPY]
    (<deep211> ^copy-me-1 a)
    [ngs-create-typed-object-in-place <deep21> deep-structure DeepType <deep212> $NGS_DEEP_COPY]
    (<deep212> ^different a)  
    [ngs-create-typed-object-in-place <deep211> deep-structure DeepType <deep2111> $NGS_DEEP_COPY]
    (<deep2111> ^copy-me-1 a)
    [ngs-create-typed-object-in-place <deep211> deep-structure DeepType <deep2112> $NGS_DEEP_COPY]
    (<deep2112> ^different a)"  

sp "test
    (state <s> ^complex <complex>)
    (<complex> ^deep-structure <d1>
               ^deep-structure { <d2> <> <d1> })
    (<d1> ^copy-me-1 a
          ^deep-structure <d21>
          ^deep-structure <d22>
         -^different a)
    (<d2> ^different a
         -^copy-me-1 a)
   -{
        (<complex> ^deep-structure { <d3> <> <d1> <> <d2> })
    }
    (<d21> ^copy-me-1 a
           ^deep-structure <d211>
           ^deep-structure <d212>
          -^different a)
    (<d22> ^different a
          -^copy-me-1 a)
   -{
        (<d1> ^deep-structure { <d23> <> <d21> <> <d22> })
    }
    (<d211> ^copy-me-1 a
            ^deep-structure <d2111>
            ^deep-structure <d2112>
           -^different a)
    (<d212> ^different a
           -^copy-me-1 a)
   -{
        (<d21> ^deep-structure { <d213> <> <d211> <> <d212> })
    }
    (<d2111> ^copy-me-1 a
            -^different a)
    (<d2112> ^different a
            -^copy-me-1 a)
   -{
        (<d211> ^deep-structure { <d2113> <> <d2111> <> <d2112> })
    }
-->
    (pass)"
          
}

test stress-copy-levels {

sp "test*setup-shallow-copy-object
  (state <s> ^superstate nil)
-->
  [ngs-create-typed-object-in-place <s> sub-structure Foo <new-obj>]
  (<new-obj> ^existing-attribute-1 foo
             ^existing-attribute-2 bar
             ^existing-attribute-set 1
             ^existing-attribute-set 2)"

sp "test*create-new-object-1
    (state <s> ^superstate nil
               ^sub-structure <sub-structure>
              -^step)
    [ngs-is-not-constructed <s> complex]
-->
    [ngs-create-typed-object-by-operator <s> <s> complex ComplexObject <level1>]
    (<level1>  ^already-exists <sub-structure>
               ^primitive1 foo
               ^set-val    1
               ^set-val    2)
    [ngs-create-typed-object-in-place <level1> deep-structure DeepType <level2> $NGS_DEEP_COPY]
    (<level2> ^already-exists <sub-structure>
               ^primitive1 foo
               ^set-val    1
               ^set-val    2)
    [ngs-create-typed-object-in-place <level2> deep-structure DeepType <level3> $NGS_DEEP_COPY]
    (<level3> ^already-exists <sub-structure>
               ^primitive1 foo
               ^set-val    1
               ^set-val    2)
    [ngs-create-typed-object-in-place <level3> deep-structure DeepType <level4> $NGS_DEEP_COPY]
    (<level4> ^already-exists <sub-structure>
               ^primitive1 foo
               ^set-val    1
               ^set-val    2)
    [ngs-create-typed-object-in-place <level4> deep-structure DeepType <level5> $NGS_DEEP_COPY]
    (<level5> ^already-exists <sub-structure>
               ^primitive1 foo
               ^set-val    1
               ^set-val    2)
    [ngs-create-typed-object-in-place <level5> deep-structure DeepType <level6> $NGS_DEEP_COPY]
    (<level6> ^already-exists <sub-structure>
               ^primitive1 foo
               ^set-val    1
               ^set-val    2)"

sp "test
    (state <s> ^superstate nil
               ^complex <d1>
               ^sub-structure <existing>)
    (<d1>      ^already-exists <existing>
               ^primitive1 foo
               ^set-val 1
               ^set-val 2
               ^deep-structure <d2>)
    [ngs-is-tagged <d1> $NGS_TAG_CONSTRUCTED]
    [ngs-is-not-tagged <d1> $NGS_TAG_SOURCE_OBJ <src-1>]
    (<d2>      ^already-exists <existing>
               ^primitive1 foo
               ^set-val 1
               ^set-val 2
               ^deep-structure <d3>)
    [ngs-is-tagged <d2> $NGS_TAG_CONSTRUCTED]
    [ngs-is-not-tagged <d2> $NGS_TAG_SOURCE_OBJ <src-2>]
    (<d3>      ^already-exists <existing>
               ^primitive1 foo
               ^set-val 1
               ^set-val 2
               ^deep-structure <d4>)
    [ngs-is-tagged <d3> $NGS_TAG_CONSTRUCTED]
    [ngs-is-not-tagged <d3> $NGS_TAG_SOURCE_OBJ <src-3>]
    (<d4>      ^already-exists <existing>
               ^primitive1 foo
               ^set-val 1
               ^set-val 2
               ^deep-structure <d5>)
    [ngs-is-tagged <d4> $NGS_TAG_CONSTRUCTED]
    [ngs-is-not-tagged <d4> $NGS_TAG_SOURCE_OBJ <src-4>]
    (<d5>      ^already-exists <existing>
               ^primitive1 foo
               ^set-val 1
               ^set-val 2
               ^deep-structure <d6>)
    [ngs-is-tagged <d5> $NGS_TAG_CONSTRUCTED]
    [ngs-is-not-tagged <d5> $NGS_TAG_SOURCE_OBJ <src-5>]
   -(<d6>       ^<attr>)
-->
    (pass)"

}


# This test shows that if set items are shallow copied, the deep copy
#  process works properly.
test shallow-copy-with-set-values {

sp "test*setup-shallow-copy-object*1
  (state <s> ^superstate nil)
-->
  [ngs-create-typed-object-in-place <s> set-item-1 Foo <new-obj>]
  (<new-obj> ^copy-me-1 a)"

sp "test*setup-shallow-copy-object*2
  (state <s> ^superstate nil)
-->
  [ngs-create-typed-object-in-place <s> set-item-2 Foo <new-obj>]
  (<new-obj> ^different a)"

sp "test*create-new-object-1
    (state <s> ^superstate nil
               ^set-item-1 <set-item-1>
               ^set-item-2 <set-item-2>)
    [ngs-is-not-constructed <s> complex]
-->
    [ngs-create-typed-object-by-operator <s> <s> complex ComplexObject <new-obj>]
    (<new-obj> ^set-item <set-item-1>
               ^set-item <set-item-2>)"

sp "test
    (state <s> ^complex <complex>)
    (<complex> ^set-item <s1>
               ^set-item { <s2> <> <s1> })
    (<s1> ^copy-me-1 a
         -^different a)
    (<s2> ^different a
         -^copy-me-1 a)
   -{
        (<complex> ^set-item { <s3> <> <s1> <> <s2> })
    }
-->
    (pass)"
          
}


test goal-o-support-goal-creation { 

sp "test*create-achievement-goal
    [ngs-match-goalpool <s> <goals> TestAchievementGoal]
    (<s> ^$WM_CYCLE_COUNT 1)
-->
    [ngs-create-goal-by-operator <s> TestAchievementGoal $NGS_GB_ACHIEVE <new-goal>]" 

sp "test*mark-goal-achieved
:o-support
    [ngs-match-goal <s> TestAchievementGoal <g> $NGS_GB_ACHIEVE]
    [ngs-is-tagged <g> $NGS_TAG_CONSTRUCTED]
-->
    [ngs-tag-goal-achieved <g>]
    (<s> ^goal-created $NGS_YES)"

sp "test
    [ngs-match-goalpool <s> <goals> TestAchievementGoal]
    (<s> ^goal-created $NGS_YES)
    (<goals> -^goal)
-->
    (pass)"
}

test decide-operator-function-with-goal {
    
sp "test*create-achievement-goal
    [ngs-match-goalpool <s> <goals> TestMaintenanceGoal]
-->
    [ngs-create-goal-in-place <goals> TestMaintenanceGoal $NGS_GB_MAINT <new-goal>]" 

sp* "test*create-decide-operator
    [ngs-match-goal <s> TestMaintenanceGoal <g>]
    [ngs-is-not-tagged <g> executed]
-->
    [ngs-create-decide-operator <s> test-decide <o> <ret-vals> <g>]
    [ngs-create-ret-tag-in-place end-tag <ret-vals> <g> executed]
    [ngs-create-ret-val-in-place planning-result <ret-vals> <s> updated-plan]"


sp "test*create-fake-plan
    [ngs-match-to-set-return-value <ss> TestMaintenanceGoal <g> planning-result <ret-val>]
    [ngs-is-not-constructed <ret-val> value]
-->
    [ngs-create-typed-object-by-operator <ss> <ret-val> value MyPlan <new-plan>]
    (<new-plan> ^text |I'm here|)"

sp "test
   [ngs-match-goal <s> TestMaintenanceGoal <g>]
   [ngs-is-tagged <g> executed]
   (<s> ^updated-plan <p>)
   [ngs-is-type <p> MyPlan]
   (<p> ^text |I'm here|)
-->
    (pass)"
}

test subgoal-creation-destruction {
    
sp "test*create-achievement-goal
    [ngs-match-goalpool <s> <goals> TestAchievementGoal]
	[ngs-is-not-constructed <goals> goal <g>]
    [ngs-is-not-tagged <s> started-counting]
-->
	[ngs-create-goal-by-operator <s> TestAchievementGoal $NGS_GB_ACHIEVE <new-goal>]" 

# Create a single sub-goal that will not be active
sp* "test*create-decide-operator*first-subgoal
    [ngs-match-goal <s> TestAchievementGoal <g> $NGS_GB_ACHIEVE]
    [ngs-is-not-tagged <g> subgoal-created]
    [ngs-is-not-tagged <s> started-counting]
-->
    [ngs-create-decide-operator <s> test-decide-about-subgoal <o> <ret-vals> <g> subgoal-created]"

sp* "test*decide-create-subgoal-as-return-value
    [ngs-match-to-create-new-ret-val <ss> TestAchievementGoal <g> <retvals>]
   -{
    	[ngs-is-return-val <retvals> $NGS_GOAL_RETURN_VALUE <g2>]
     	[ngs-is-named <g2> TestAchievementSubGoal]
    }
-->
    [ngs-create-goal-as-return-value <ss> TestAchievementSubGoal $NGS_GB_ACHIEVE <new-goal> <g>]"

sp* "test*create-decide-operator*second-subgoal
   [ngs-match-goal <s> TestAchievementSubGoal <g>]
  -{
		[ngs-match-goal <s> TestAchievementSubGoal <g2>]
 		[ngs-is-tagged <g2> second-goal]
   }
   [ngs-is-not-tagged <s> started-counting]
-->
    [ngs-create-decide-operator <s> test-decide-about-subgoal <o> <ret-vals> <g>]"

# This will short circuite the sub-state
sp* "test*decide-create-subgoal-in-middle-of-substate
    [ngs-match-active-goal <s> TestAchievementSubGoal <ag> <top-state>]
    -{
		[ngs-match-goal <top-state> TestAchievementSubGoal <subg>]
   		[ngs-is-tagged <subg> second-goal]
     }
-->
    [ngs-create-goal-by-operator <s> TestAchievementSubGoal $NGS_GB_ACHIEVE <new-goal> <ag>]
    [ngs-tag <new-goal> second-goal]"

sp* "test*decide-create-subgoal-in-middle-of-substate*activate-second-subgoal
	[ngs-match-goal <s> TestAchievementSubGoal <g>]
    [ngs-is-tagged <g> second-goal]
-->
	[ngs-create-decide-operator <s> test-decide-about-subgoal <o> ret-vals <g>]"

sp "test*decide-create-subgoal-in-middle-of-substate*started-counting
    [ngs-match-active-goal <s> TestAchievementSubGoal <g> <top-state>]
    [ngs-is-tagged <g> second-goal]
    [ngs-is-not-tagged <top-state> started-counting]
-->
    [ngs-create-tag-by-operator <s> <top-state> started-counting]"

sp "test*decide-create-subgoal-in-middle-of-substate*initialize-counter
    [ngs-match-active-goal <s> TestAchievementSubGoal <g>]
    [ngs-is-tagged <g> second-goal]
    [ngs-is-tagged <top-state> started-counting]
    (<s> -^counter)
-->
    [ngs-create-primitive-by-operator <s> <s> counter 0]"


sp* "test*decide-create-subgoal-in-middle-of-substate*count
    [ngs-match-active-goal <s> TestAchievementSubGoal <g>]
    (<s> ^counter <cur-val>)
-->
    [ngs-create-primitive-by-operator <s> <s> counter {(+ <cur-val> 1)}]"

sp "test*mark-supergoal-achieved
    [ngs-match-active-goal <s> TestAchievementSubGoal <g>]
    [ngs-match-goal <top-state> TestAchievementGoal <gtop>]
    (<s> ^counter  > 4 )
-->
    [ngs-create-atomic-operator <s> $NGS_OP_MARK_ACHIEVED <o> ">"]
    (<o> ^goal <gtop>)"

sp "test
    [ngs-match-goalpool <s> <goals> TestAchievementGoal]
    [ngs-match-goalpool <s> <subgoals> TestAchievementSubGoal]
    [ngs-is-tagged <s> started-counting]
    (<goals> -^goal)
    (<subgoals> -^goal)
-->
    (pass)"
}
