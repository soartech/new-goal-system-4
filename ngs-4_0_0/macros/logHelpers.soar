##!
# @file
#
# @created bob.marinier 20170206

# Sets or displays the current log level. Impacts how ngs-log and ngs-add-log-side-effect work.
# For jsoar, this passes through to the log command, and thus can be changed at runtime
# For csoar, this sets a variable that only has effect at load time, and thus cannot be changed at runtime
#
# level - (Optional) If not specified, the current log settings are displayed. Can be set
#         to one of $NGS_TRACE, $NGS_DEBUG, $NGS_INFO, $NGS_WARN, or $NGS_ERROR. Calls to
#         ngs-log or ngs-add-log-side-effect will be shown if their log level is at or above
#         the log level specified here.
proc ngs-set-log-level { {level ""} } {
    variable NGS_LOG_LEVELS
    variable NGS_LOG_LEVEL
    variable NGS_TRACE
    variable NGS_DEBUG
    variable NGS_INFO
    variable NGS_WARN
    variable NGS_ERROR
    variable SOAR_IMPLEMENTATION
    variable JSOAR
    variable NGS_TRACE_VALUE
    variable NGS_ERROR_VALUE

    if { $SOAR_IMPLEMENTATION eq $JSOAR } {
        if { $level eq "" } {
            log
        } else {
            log --level $level
        }
    } else {
        if { $level eq "" } {
            echo "Log level: $NGS_LOG_LEVEL"
        } else {
            # normalize
            set level [string toupper $level]
            # search the log levels for the specified key (if found, it returns the string we looked for)
            if { [dict keys $NGS_LOG_LEVELS $level] eq $level } {
                set NGS_LOG_LEVEL $level
                # get the numeric value for this level
                set numericLevel [dict get $NGS_LOG_LEVELS $level]
                # iterate through each channel and set those channels below the level off, and those at or above on
                for { set i $NGS_TRACE_VALUE } { $i <= $NGS_ERROR_VALUE } { incr i } {
                    if { $i < $numericLevel } {
                        output agent-logs $i off
                    } else {
                        output agent-logs $i on
                    }
                }
            } else {
                echo "Log level '$level' is invalid. Valid log levels are \$NGS_TRACE, \$NGS_DEBUG, \$NGS_INFO, \$NGS_WARN, \$NGS_ERROR"
            }
        }
    }
    
}

# For internal use
# Preps a string for being passed to the write or log RHS functions
# Takes a string that includes soar vars, surround the vars with pipes, and then concat the whole text together
# E.g., turns "foo <bar>" into "(concat |foo |<bar>||)", which can then be passed to write or log
#       to be printed such that the soar vars get bound properly at runtime
proc ngs-process-string-for-writelog { text } {
  # this regex says to find "<" followed by one or more non-whitespace chars followed by ">"
  set regex {\<(\S+)\>}
  # surround all found soar variables with pipes
  set textWithVars [regsub -all $regex $text {|<\1>|}]
  return |$textWithVars|
}
